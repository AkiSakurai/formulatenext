From 7142683b829f82648ca51442522046c40e581525 Mon Sep 17 00:00:00 2001
From: Andrew de los Reyes <adlr@chromium.org>
Date: Tue, 26 Nov 2019 17:13:21 -0800
Subject: [PATCH] patch to build libtxt for FN

---
 third_party/txt/Makefile        | 67 +++++++++++++++++++++++++++++++++++
 third_party/txt/flutter_shim.cc | 78 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 145 insertions(+)
 create mode 100644 third_party/txt/Makefile
 create mode 100644 third_party/txt/flutter_shim.cc

diff --git a/third_party/txt/Makefile b/third_party/txt/Makefile
new file mode 100644
index 000000000..8c15482b7
--- /dev/null
+++ b/third_party/txt/Makefile
@@ -0,0 +1,67 @@
+all: libtxt.a
+
+OBJECTS=\
+	obj/src/log/log.o \
+	obj/src/minikin/CmapCoverage.o \
+	obj/src/minikin/Emoji.o \
+	obj/src/minikin/FontCollection.o \
+	obj/src/minikin/FontFamily.o \
+	obj/src/minikin/FontLanguage.o \
+	obj/src/minikin/FontLanguageListCache.o \
+	obj/src/minikin/FontUtils.o \
+	obj/src/minikin/GraphemeBreak.o \
+	obj/src/minikin/HbFontCache.o \
+	obj/src/minikin/Hyphenator.o \
+	obj/src/minikin/Layout.o \
+	obj/src/minikin/LayoutUtils.o \
+	obj/src/minikin/LineBreaker.o \
+	obj/src/minikin/Measurement.o \
+	obj/src/minikin/MinikinFont.o \
+	obj/src/minikin/MinikinInternal.o \
+	obj/src/minikin/SparseBitSet.o \
+	obj/src/minikin/WordBreaker.o \
+	obj/src/txt/asset_font_manager.o \
+	obj/src/txt/font_asset_provider.o \
+	obj/src/txt/font_collection.o \
+	obj/src/txt/font_features.o \
+	obj/src/txt/font_skia.o \
+	obj/src/txt/paint_record.o \
+	obj/src/txt/paragraph_builder.o \
+	obj/src/txt/paragraph_builder_txt.o \
+	obj/src/txt/paragraph_style.o \
+	obj/src/txt/paragraph_txt.o \
+	obj/src/txt/placeholder_run.o \
+	obj/src/txt/platform_linux.o \
+	obj/src/txt/styled_runs.o \
+	obj/src/txt/test_font_manager.o \
+	obj/src/txt/text_decoration.o \
+	obj/src/txt/text_shadow.o \
+	obj/src/txt/text_style.o \
+	obj/src/txt/typeface_font_asset_provider.o \
+	obj/src/utils/JenkinsHash.o \
+	obj/flutter_shim.o
+
+CFLAGS=\
+	-Os -g -D__linux__ -D__pnacl__
+
+INC=\
+	-I src \
+	-I ../../.. \
+	-I ../../../third_party/skia/
+
+#	-I ../../../third_party/harfbuzz/src/ \
+#	-I ~/.emscripten_ports/harfbuzz/harfbuzz-1.7.5/src
+
+obj/%.o : %.cc
+	mkdir -p $(@D)
+	emcc $(CFLAGS) -MMD -std=c++17 $(INC) -o $@ $< \
+		-s USE_HARFBUZZ=1
+
+obj/%.o : %.cpp
+	mkdir -p $(@D)
+	emcc $(CFLAGS) -MMD -std=c++17 $(INC) -o $@ $< \
+		-s USE_HARFBUZZ=1
+
+libtxt.a: $(OBJECTS)
+	rm -f $@
+	emar rcs $@ $(OBJECTS)
diff --git a/third_party/txt/flutter_shim.cc b/third_party/txt/flutter_shim.cc
new file mode 100644
index 000000000..c0f456417
--- /dev/null
+++ b/third_party/txt/flutter_shim.cc
@@ -0,0 +1,78 @@
+// Copyright...
+
+#include "flutter/fml/logging.h"
+#include "flutter/fml/trace_event.h"
+
+namespace fml {
+
+namespace {
+
+const char* const kLogSeverityNames[LOG_NUM_SEVERITIES] = {"INFO", "WARNING",
+                                                           "ERROR", "FATAL"};
+
+const char* GetNameForLogSeverity(LogSeverity severity) {
+  if (severity >= LOG_INFO && severity < LOG_NUM_SEVERITIES)
+    return kLogSeverityNames[severity];
+  return "UNKNOWN";
+}
+
+const char* StripDots(const char* path) {
+  while (strncmp(path, "../", 3) == 0)
+    path += 3;
+  return path;
+}
+
+const char* StripPath(const char* path) {
+  auto* p = strrchr(path, '/');
+  if (p)
+    return p + 1;
+  else
+    return path;
+}
+
+}  // namespace {}
+
+LogMessage::LogMessage(LogSeverity severity,
+                       const char* file,
+                       int line,
+                       const char* condition)
+    : severity_(severity), file_(file), line_(line) {
+  stream_ << "[";
+  if (severity >= LOG_INFO)
+    stream_ << GetNameForLogSeverity(severity);
+  else
+    stream_ << "VERBOSE" << -severity;
+  stream_ << ":" << (severity > LOG_INFO ? StripDots(file_) : StripPath(file_))
+          << "(" << line_ << ")] ";
+
+  if (condition)
+    stream_ << "Check failed: " << condition << ". ";
+
+}
+
+LogMessage::~LogMessage() {
+  stream_ << std::endl;
+  fprintf(stderr, "%s", stream_.str().c_str());
+}
+
+bool ShouldCreateLogMessage(LogSeverity severity) {
+  return true;
+}
+
+namespace tracing {
+
+void TraceEvent0(TraceArg category_group, TraceArg name) {
+}
+
+void TraceEvent1(TraceArg category_group,
+                 TraceArg name,
+                 TraceArg arg1_name,
+                 TraceArg arg1_val) {
+}
+
+void TraceEventEnd(TraceArg name) {
+}
+
+}  // namespace tracing
+
+}  // namespace fml
-- 
2.11.0

