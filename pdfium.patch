diff --git a/core/fpdfapi/edit/cpdf_pagecontentgenerator.cpp b/core/fpdfapi/edit/cpdf_pagecontentgenerator.cpp
index d2c8bf204..0bb8a2e09 100644
--- a/core/fpdfapi/edit/cpdf_pagecontentgenerator.cpp
+++ b/core/fpdfapi/edit/cpdf_pagecontentgenerator.cpp
@@ -118,9 +118,9 @@ CPDF_PageContentGenerator::GenerateModifiedStreams() {
         pdfium::MakeUnique<std::ostringstream>();
 
     // Set the default graphic state values
-    *buf << "q\n";
+    *buf << "q  % GenerateModifiedStreams\n";
     if (!m_pObjHolder->GetLastCTM().IsIdentity())
-      *buf << m_pObjHolder->GetLastCTM().GetInverse() << " cm\n";
+      *buf << m_pObjHolder->GetLastCTM().GetInverse() << " cm % GetLastCTM\n";
 
     ProcessDefaultGraphics(buf.get());
 
@@ -153,7 +153,7 @@ CPDF_PageContentGenerator::GenerateModifiedStreams() {
       FinishMarks(buf, current_content_marks[dirty_stream]);
 
       // Return graphics to original state
-      *buf << "Q\n";
+      *buf << "Q  % GenerateModifiedStreams\n";
     }
   }
 
@@ -189,7 +189,7 @@ void CPDF_PageContentGenerator::UpdateContentStreams(
     if (buf->tellp() <= 0)
       page_content_manager.ScheduleRemoveStreamByIndex(stream_index);
     else
-      old_stream->SetDataFromStringstream(buf);
+      old_stream->SetDataFromStringstreamAndRemoveFilter(buf);
   }
 
   page_content_manager.ExecuteScheduledRemovals();
@@ -318,6 +318,9 @@ void CPDF_PageContentGenerator::ProcessPageObject(std::ostringstream* buf,
     ProcessPath(buf, pPathObj);
   else if (CPDF_TextObject* pTextObj = pPageObj->AsText())
     ProcessText(buf, pTextObj);
+  else {
+    fprintf(stderr, "Can't process obj of type %d\n", pPageObj->GetType());
+  }
   pPageObj->SetDirty(false);
 }
 
@@ -327,7 +330,7 @@ void CPDF_PageContentGenerator::ProcessImage(std::ostringstream* buf,
       (pImageObj->matrix().c == 0 && pImageObj->matrix().d == 0)) {
     return;
   }
-  *buf << "q " << pImageObj->matrix() << " cm ";
+  *buf << "q % ProcessImage\n" << pImageObj->matrix() << " cm ";
 
   RetainPtr<CPDF_Image> pImage = pImageObj->GetImage();
   if (pImage->IsInline())
@@ -346,7 +349,7 @@ void CPDF_PageContentGenerator::ProcessImage(std::ostringstream* buf,
     pImageObj->SetImage(
         m_pDocument->GetPageData()->GetImage(pStream->GetObjNum()));
 
-  *buf << "/" << PDF_NameEncode(name) << " Do Q\n";
+  *buf << "/" << PDF_NameEncode(name) << " Do Q  % ProcessImage\n";
 }
 
 // Processing path with operators from Tables 4.9 and 4.10 of PDF spec 1.7:
@@ -412,7 +415,7 @@ void CPDF_PageContentGenerator::ProcessPath(std::ostringstream* buf,
     *buf << (pPathObj->stroke() ? " B" : " f");
   else if (pPathObj->filltype() == FXFILL_ALTERNATE)
     *buf << (pPathObj->stroke() ? " B*" : " f*");
-  *buf << " Q\n";
+  *buf << " Q  % ProcessPath\n";
 }
 
 // This method supports color operators rg and RGB from Table 4.24 of PDF spec
@@ -425,7 +428,7 @@ void CPDF_PageContentGenerator::ProcessPath(std::ostringstream* buf,
 // "q" saves the graphics state, so that the settings can later be reversed
 void CPDF_PageContentGenerator::ProcessGraphics(std::ostringstream* buf,
                                                 CPDF_PageObject* pPageObj) {
-  *buf << "q ";
+  *buf << "q %ProcessGraphics\n ";
   float fillColor[3];
   if (GetColor(pPageObj->m_ColorState.GetFillColor(), fillColor)) {
     *buf << fillColor[0] << " " << fillColor[1] << " " << fillColor[2]
@@ -557,12 +560,25 @@ void CPDF_PageContentGenerator::ProcessText(std::ostringstream* buf,
     m_pObjHolder->m_FontsMap[data] = dictName;
   }
   *buf << "/" << PDF_NameEncode(dictName) << " ";
-  WriteFloat(*buf, pTextObj->GetFontSize()) << " Tf ";
+  WriteFloat(*buf, pTextObj->m_TextState.GetCharSpace()) << " Tc ";
+  WriteFloat(*buf, pTextObj->GetFontSize()) << " Tf [";
   ByteString text;
+  size_t count = 0;
   for (uint32_t charcode : pTextObj->GetCharCodes()) {
-    if (charcode != CPDF_Font::kInvalidCharCode)
+    if (charcode != CPDF_Font::kInvalidCharCode) {
       pFont->AppendChar(&text, charcode);
+    } else if (count > 0) {
+      *buf << PDF_EncodeString(text, true);
+      *buf << " ";
+      WriteFloat(*buf, pTextObj->GetCharPositions()[count - 1]);
+      *buf << " ";
+      text.clear();
+    }
+    count++;
+  }
+  if (!text.IsEmpty()) {
+    *buf << PDF_EncodeString(text, true);
   }
-  *buf << PDF_EncodeString(text, true) << " Tj ET";
-  *buf << " Q\n";
+  *buf << "] TJ ET";
+  *buf << " Q  % ProcessText\n";
 }
diff --git a/core/fpdfapi/page/cpdf_textobject.cpp b/core/fpdfapi/page/cpdf_textobject.cpp
index c554113f2..6dc01ed43 100644
--- a/core/fpdfapi/page/cpdf_textobject.cpp
+++ b/core/fpdfapi/page/cpdf_textobject.cpp
@@ -15,7 +15,9 @@
 
 CPDF_TextObjectItem::CPDF_TextObjectItem() : m_CharCode(0) {}
 
-CPDF_TextObjectItem::~CPDF_TextObjectItem() = default;
+CPDF_TextObjectItem::~CPDF_TextObjectItem() {
+  fprintf(stderr, "text object deleted\n");
+};
 
 CPDF_TextObject::CPDF_TextObject(int32_t content_stream)
     : CPDF_PageObject(content_stream) {}
diff --git a/core/fxge/BUILD.gn b/core/fxge/BUILD.gn
index 83374cc0e..11fa8ec50 100644
--- a/core/fxge/BUILD.gn
+++ b/core/fxge/BUILD.gn
@@ -157,7 +157,7 @@ jumbo_source_set("fxge") {
     ]
   }
 
-  if (is_linux) {
+  if (is_linux || current_os == "wasm") {
     sources += [ "fx_ge_linux.cpp" ]
   }
 
diff --git a/fpdfsdk/fpdf_editpage.cpp b/fpdfsdk/fpdf_editpage.cpp
index 09b287dc3..f0aef4c2d 100644
--- a/fpdfsdk/fpdf_editpage.cpp
+++ b/fpdfsdk/fpdf_editpage.cpp
@@ -252,6 +252,7 @@ FPDF_EXPORT void FPDF_CALLCONV FPDFPage_InsertObject(FPDF_PAGE page,
     return;
 
   pPageObj->SetDirty(true);
+  pPageObj->SetContentStream(CPDF_PageObject::kNoContentStream);
   pPage->AppendPageObject(std::move(pPageObjHolder));
   CalcBoundingBox(pPageObj);
 }
diff --git a/testing/utils/path_service.cpp b/testing/utils/path_service.cpp
index 5e1ce3960..91bd60e85 100644
--- a/testing/utils/path_service.cpp
+++ b/testing/utils/path_service.cpp
@@ -10,7 +10,8 @@
 #include <mach-o/dyld.h>
 #include <sys/stat.h>
 #else  // Linux
-#include <linux/limits.h>
+//#include <linux/limits.h>
+#define PATH_MAX 4096
 #include <sys/stat.h>
 #include <unistd.h>
 #endif  // _WIN32
diff --git a/third_party/BUILD.gn b/third_party/BUILD.gn
index 3863ad2f8..9d24e1cf9 100644
--- a/third_party/BUILD.gn
+++ b/third_party/BUILD.gn
@@ -446,6 +446,7 @@ source_set("fx_libopenjpeg") {
     "libopenjpeg20/tgt.c",
     "libopenjpeg20/thread.c",
   ]
+  defines = [ "_GNU_SOURCE" ]
 }
 
 config("system_libpng_config") {
diff --git a/third_party/base/allocator/partition_allocator/spin_lock.cc b/third_party/base/allocator/partition_allocator/spin_lock.cc
index 42055836b..1aa96a72a 100644
--- a/third_party/base/allocator/partition_allocator/spin_lock.cc
+++ b/third_party/base/allocator/partition_allocator/spin_lock.cc
@@ -51,7 +51,7 @@
 #endif  // ARCH
 
 #ifndef YIELD_PROCESSOR
-#warning "Processor yield not supported on this architecture."
+//#warning "Processor yield not supported on this architecture."
 #define YIELD_PROCESSOR ((void)0)
 #endif
 
diff --git a/third_party/yasm/yasm_assemble.gni b/third_party/yasm/yasm_assemble.gni
index f94fa6bd6..cc6aaff3d 100644
--- a/third_party/yasm/yasm_assemble.gni
+++ b/third_party/yasm/yasm_assemble.gni
@@ -123,6 +123,7 @@ template("yasm_assemble") {
                          root_build_dir) ]
 
     # Deps.
+    print(invoker)
     deps = [
       yasm_label,
     ]
